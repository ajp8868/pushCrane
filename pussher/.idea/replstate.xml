<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1456402220163">{:repl-history {:ide [], :local [&quot;(planner (union state world) '((at Tblue c2)) planner-ops)&quot; &quot;(def planner-ops\n  '{\n    :moveVert{:name moveVertical\n              :achieves (at ?block ?col2)\n              :post (at ?block ?col2)\n              :when ( (at ?block ?col)\n                      (isa ?col2 coly)\n                      (isa ?col3 colx)\n                      (at ?block ?col3)\n                      )\n              :del (  (at ?block ?col))\n              :add ( (at ?block ?col2))\n              :pre ()\n              :txt  ((move ?block from ?col to ?col2 ))\n              :cmd ((moveVert ?col3 ?col2 ?col))\n              }\n    :moveHoroz{:name moveHorozontel\n               :achieves (at ?block ?col2)\n               :post (at ?block ?col2)\n               :when ( (isa ?block block)\n                       (at ?block ?col)\n                       (isa ?col2 colx)\n                       (isa ?col3 coly)\n                       (at ?block ?col3)\n                       )\n               :del (  (at ?block ?col))\n               :add ( (at ?block ?col2))\n               :pre ()\n               :txt  ((move ?block from ?col to ?col2 ))\n               :cmd ((moveHoz L ?col3 ?col2 ?col))\n               }\n    }\n  )&quot; &quot;(planner (union state world) '((at Tblue y2)) planner-ops)&quot; &quot;(ns pussher.ops-search)\n\n(require '[cgsx.tools.matcher :refer :all])\n(require '[clojure.set :refer :all])\n(require '[clojure.pprint :refer :all])\n\n(declare finalise-results update-state-map apply-op apply-all)\n\n\n(defn ops-search\n  [start goal ops &amp; {:keys [world debug]\n                     :or {debug  false\n                          world  #{}}}]\n  (println goal)\n  ; using sets for state tuples...\n  (let [start {:state (set start) :path () :cmds () :txt ()}\n        world (set world)\n        goal? (fn [state] (mfind* [goal (into world (:state state))] state))\n        ]\n    (or (goal? start)\n        (finalise-results\n          (loop [waiting (list start)\n                 visited #{}\n                 ]\n            (when debug (pprint (list 'waiting= waiting 'visited= visited)))\n            (if (empty? waiting) nil\n                                 (let [ [next &amp; waiting] waiting\n                                       {:keys [state path cmds]} next\n                                       visited? (partial contains? visited)\n                                       ]\n                                   (when debug (pprint (list 'next-state= state)))\n                                   (if (visited? state)\n                                     (recur waiting visited)\n                                     (let [succs (remove visited? (apply-all ops state world))\n                                           g     (some goal? succs)\n                                           ]\n                                       (if g (update-state-map next g)\n                                             (recur\n                                               (concat waiting (map #(update-state-map next %) succs))\n                                               (conj visited state) ))\n                                       )))))\n          ))))\n\n\n(defn update-state-map\n  [old successor]\n  {:state (:state successor)\n   :path  (cons (:state old) (:path old))\n   :cmds  (cons (:cmd successor) (:cmds old))\n   :txt   (cons (:txt successor) (:txt old))\n   })\n\n\n\n\n\n(defn finalise-results [state-map]\n  \&quot;reverses relevant parts of results\&quot;\n  (if-not (map? state-map)\n    ;; leave it as it is\n    state-map\n    ;; else\n    {:state (:state state-map)\n     :path  (reverse (:path state-map))\n     :cmds  (reverse (:cmds state-map))\n     :txt   (reverse (:txt state-map))\n     }\n    ))\n\n\n(defn apply-op [op state world]\n  (mfor* [(:pre op) (seq (into world state))]\n         {:state (union (set (mout (:add op)))\n                        (difference state (set (mout (:del op)))))\n          :cmd   (mout (:cmd op))\n          :txt   (mout (:txt op))\n          }\n         ))\n\n\n(defn apply-all [ops state world]\n  (reduce concat\n          (map (fn [x] (apply-op (x ops) state world))\n               (keys ops)\n               )))\n\n\n;======================\n; testing\n;======================\n\n;(def ops\n;  '{pickup {:pre ((agent ?agent)\n;                   (manipulable ?obj)\n;                   (at ?agent ?place)\n;                   (on ?obj   ?place)\n;                   (holds ?agent nil)\n;                   )\n;            :add ((holds ?agent ?obj))\n;            :del ((on ?obj   ?place)\n;                   (holds ?agent nil))\n;            :txt (pickup ?obj from ?place)\n;            :cmd [grasp ?obj]\n;            }\n;    drop    {:pre ((at ?agent ?place)\n;                    (holds ?agent ?obj)\n;                    (:guard (? obj))\n;                    )\n;             :add ((holds ?agent nil)\n;                    (on ?obj   ?place))\n;             :del ((holds ?agent ?obj))\n;             :txt (drop ?obj at ?place)\n;             :cmd [drop ?obj]\n;             }\n;    move    {:pre ((agent ?agent)\n;                    (at ?agent ?p1)\n;                    (connects ?p1 ?p2)\n;                    )\n;             :add ((at ?agent ?p2))\n;             :del ((at ?agent ?p1))\n;             :txt (move ?p1 to ?p2)\n;             :cmd [move ?p2]\n;             }\n;    })\n;\n;\n;(def state1\n;  '#{(at R table)\n;     (on book table)\n;     (on spud table)\n;     (holds R nil)\n;     (connects table bench)\n;     (manipulable book)\n;     (manipulable spud)\n;     (agent R)\n;     })\n;\n;\n;user=&gt; (ops-search state1 '((on book bench)) ops)\n;{:state #{(agent R) (manipulable book) (on spud table) (on book bench) (holds R nil)\n;          (at R bench) (manipulable spud) (connects table bench)},\n; :path (#{(agent R) (manipulable book) (on spud table) (holds R nil) (manipulable spud)\n;          (connects table bench) (on book table) (at R table)}\n;        #{(agent R) (holds R book) (manipulable book) (on spud table) (manipulable spud)\n;          (connects table bench) (at R table)}\n;        #{(agent R) (holds R book) (manipulable book) (on spud table) (at R bench)\n;          (manipulable spud) (connects table bench)}),\n; :cmds ([grasp book] [move bench] [drop book]),\n; :txt ((pickup book from table) (move table to bench) (drop book at bench))}\n;\n;\n;(def world\n;  '#{(connects table bench)\n;     (manipulable book)\n;     (manipulable spud)\n;     (agent R)\n;     })\n;\n;(def state2\n;  '#{(at R table)\n;     (on book table)\n;     (on spud table)\n;     (holds R nil)\n;     })\n;\n;\n;user=&gt; (ops-search state2 '((on book bench)) ops :world world)\n;{:state #{(on spud table) (on book bench) (holds R nil) (at R bench)},\n; :path (#{(on spud table) (holds R nil) (on book table) (at R table)}\n;        #{(holds R book) (on spud table) (at R table)}\n;        #{(holds R book) (on spud table) (at R bench)}),\n; :cmds ([grasp book] [move bench] [drop book]),\n; :txt ((pickup book from table) (move table to bench) (drop book at bench))}\n;\n;\n;(def world2\n;  '#{(connects table bench)\n;     (connects bench table)\n;     (connects bench sink)\n;     (connects sink bench)\n;     (manipulable book)\n;     (manipulable spud)\n;     (agent R)\n;     })\n;\n;(def state3\n;  '#{(at R table)\n;     (on book table)\n;     (on spud table)\n;     (holds R nil)\n;     })\n;\n;user=&gt; (ops-search state3 '((on book bench)(on spud sink)) ops :world world2)\n;{:state #{(at R sink) (on book bench) (holds R nil) (on spud sink)},\n; :path (#{(on spud table) (holds R nil) (on book table) (at R table)}\n;        #{(holds R book) (on spud table) (at R table)}\n;        #{(holds R book) (on spud table) (at R bench)}\n;        #{(on spud table) (on book bench) (holds R nil) (at R bench)}\n;        #{(on spud table) (on book bench) (holds R nil) (at R table)}\n;        #{(on book bench) (holds R spud) (at R table)}\n;        #{(on book bench) (at R bench) (holds R spud)}\n;        #{(at R sink) (on book bench) (holds R spud)}),\n; :cmds ([grasp book] [move bench] [drop book]\n;        [move table] [grasp spud] [move bench] [move sink] [drop spud]),\n; :txt ((pickup book from table) (move table to bench) (drop book at bench)\n;       (move bench to table) (pickup spud from table) (move table to bench)\n;       (move bench to sink) (drop spud at sink))}\n&quot; &quot;(ops-search state '((at blueT y2) (at blueT y3)) ops :world world)&quot; &quot;\n(def ops\n  '{\n    moveVert {:pre ((isa ?block block)\n                     ; (created ?block true)\n                     (isa ?col coly)\n                     (isa ?col3 colx)\n                     (isa ?col2 coly)\n                     (at ?block ?col)\n                     (at ?block ?col3)\n                     )\n              :add ((at ?block ?col2))\n              :del ((at ?block ?col))\n              :txt ((move ?block from ?col to ?col2))\n              :cmd (moveHoz L ?col3 ?col2 ?col)\n              }\n\n    }\n  )&quot; &quot;(ops-search state '((at blueT c2) (at blueT c3)) ops :world world)&quot; &quot;(ops-search state '((at blueT y2)(at blueT y3)) ops :world world)&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT y2)\n     (crty blueT c1)\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def state\n  '#{\n     (at T c1)\n     (at B c1)\n     (at L y1)\n\n     (at blueT c2)\n     (at blueT y1)\n     (crt blueT fls)\n\n\n     (at blueC c1)\n     (at blueC y2)\n     }\n  )&quot; &quot;(def ops\n  '{\n    moveVert {:pre ((isa ?block block)\n                     ; (created ?block true)\n                     (isa ?col coly)\n                     (isa ?col3 colx)\n                     (isa ?col2 coly)\n                     (at ?block ?col)\n                     (at ?block ?col3)\n                     )\n              :add ((at ?block ?col2))\n              :del ((at ?block ?col))\n              :txt ((move ?block from ?col to ?col2))\n              :cmd (moveHoz L ?col3 ?col2 ?col)\n              }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx1)\n                       (crty ?block ?crty2)\n                       ;                        (at B ?crtx1)\n                       ;                        (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block))\n                :cmd (create ?block )\n                }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    moveVert {:pre ((isa ?block block)\n                     (created ?block true)\n                     (isa ?col coly)\n                     (isa ?col3 colx)\n                     (isa ?col2 coly)\n                     (at ?block ?col)\n                     (at ?block ?col3)\n                     )\n              :add ((at ?block ?col2))\n              :del ((at ?block ?col))\n              :txt ((move ?block from ?col to ?col2))\n              :cmd (moveHoz L ?col3 ?col2 ?col)\n              }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx1)\n                       (crty ?block ?crty2)\n                       ;                        (at B ?crtx1)\n                       ;                        (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block))\n                :cmd (create ?block )\n                }\n\n    }\n  )&quot; &quot;(ops-search state '((at blueT y2)(at blueC y3)) ops :world world)]&quot; &quot;(ops-search state '((at blueT y2)(at blueC y3)) ops :world world)&quot; &quot;(def ops\n  '{\n    moveVert {:pre ((isa ?block block)\n                     (crt ?block tr)\n                     (isa ?col coly)\n                     (isa ?col3 colx)\n                     (isa ?col2 coly)\n                     (at ?block ?col)\n                     (at ?block ?col3)\n                     )\n              :add ((at ?block ?col2))\n              :del ((at ?block ?col))\n              :txt ((move ?block from ?col to ?col2))\n              :cmd (moveHoz L ?col3 ?col2 ?col)\n              }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx1)\n                       (crty ?block ?crty2)\n                       ;                        (at B ?crtx1)\n                       ;                        (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block))\n                :cmd (create ?block )\n                }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    ;createBlock{:pre ( (isa ?block block)\n    ;                   (crt ?block fls)\n    ;                   (crtx ?block ?crtx1)\n    ;                   (crty ?block ?crty2)\n    ;                   ;                        (at B ?crtx1)\n    ;                   ;                        (at L ?crty2)\n    ;                   )\n    ;            :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n    ;            :txt ( (crt the block ?block))\n    ;            :cmd (create ?block )\n    ;            }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(ops-search state '((at T c3)) ops :world world)&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx1)\n                       (crty ?block ?crty2)\n                       (at B ?crtx1)\n                       (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx1)\n                       (crty ?block ?crty2)\n                       (at B ?crtx1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx1)\n                       (crty ?block ?crty2)\n                       ;  (at B ?crtx1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx1)\n                       (crty ?block ?crty2)\n                       (at B c1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx1)\n                       (crty ?block ?crty2)\n                       (at B c1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx1 L at crty2))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx1)\n                       (crty ?block ?crty2)\n                       ; (at B c1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx1 L at crty2))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n     '{\n       ;moveVert {:pre ((isa ?block block)\n       ;                 (crt ?block tr)\n       ;                 (isa ?col coly)\n       ;                 (isa ?col3 colx)\n       ;                 (isa ?col2 coly)\n       ;                 (at ?block ?col)\n       ;                 (at ?block ?col3)\n       ;                 )\n       ;          :add ((at ?block ?col2))\n       ;          :del ((at ?block ?col))\n       ;          :txt ((move ?block from ?col to ?col2))\n       ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n       ;          }\n       createBlock{:pre ( (isa ?block block)\n                          (crt ?block fls)\n                          (crtx ?block ?crtx)\n                          (crty ?block ?crty)\n                         ; (at B c1)\n                       ;   (at L ?crty2)\n                          )\n                   :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                   :txt ( (crt the block ?block B at ?crtx1 L at crty2))\n                   :cmd (create ?block )\n                   }\n            moveArmHoroz{:pre ( (isa ?arm arm)\n                           (at ?arm ?col)\n                           (isa ?col2 colx))\n                      :add ( (at ?arm ?col2))\n                      :del ( (at ?arm ?col))\n                      :txt ( (moving ?arm from ?col to ?col2))\n                      :cmd (moveArmHoroz ?arm ?col2)\n                    }\n\n       }\n     )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crty ?block ?crty)\n                       (crtx ?block ?crtx)\n\n                       ; (at B c1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx1 L at crty2))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c1)\n     (crty blueT y2)\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n\n                       ; (at B c1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx1 L at crty2))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c1)\n     (crty blueT y3)\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n\n                       (at B c1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx1 L at crty2))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n\n                       (at B c1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty2))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B c1)\n                       ;   (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B c1)\n                       (at L y1)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c1)\n\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c2)\n\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(ops-search state '((at B c2)) ops :world world)&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       ;  (crtx ?block ?crtx)\n                       (at B c1)\n                       (at L y1)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       ;  (crtx ?block ?crtx)\n                       (at B c2)\n                       (at L y1)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (at B ?crtx)\n                       (at L y1)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    moveVert {:pre ((isa ?block block)\n                     (crt ?block tr)\n                     (isa ?col coly)\n                     (isa ?col3 colx)\n                     (isa ?col2 coly)\n                     (at ?block ?col)\n                     (at ?block ?col3)\n                     )\n              :add ((at ?block ?col2))\n              :del ((at ?block ?col))\n              :txt ((move ?block from ?col to ?col2))\n              :cmd (moveHoz L ?col3 ?col2 ?col)\n              }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (at B ?crtx)\n                       (at L y1)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(ops-search state '((at blueT y2)) ops :world world)&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c2)\n     (crty blueT y2)\n\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty2)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (location ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c2)\n     (crty blueT y2)\n\n     (location blueT y2)\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (location ?block ?crty)\n                       (at B ?crtx)\n                       ; (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at ?crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c2)\n     (crty blueT y1)\n\n     (location blueT y2)\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (location ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at ?crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c2)\n     ; (crty blueT y1)\n\n     (location blueT y1)\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at ?crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c2)\n     ; (crty blueT y1)\n\n     (crty blueT y1)\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at ?crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col colx)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n\n    }\n  )&quot; &quot;(ops-search state '((crt blueT tr)) ops :world world)&quot; &quot;(def ops\n  '{\n    ;moveVert {:pre ((isa ?block block)\n    ;                 (crt ?block tr)\n    ;                 (isa ?col coly)\n    ;                 (isa ?col3 colx)\n    ;                 (isa ?col2 coly)\n    ;                 (at ?block ?col)\n    ;                 (at ?block ?col3)\n    ;                 )\n    ;          :add ((at ?block ?col2))\n    ;          :del ((at ?block ?col))\n    ;          :txt ((move ?block from ?col to ?col2))\n    ;          :cmd (moveHoz L ?col3 ?col2 ?col)\n    ;          }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at ?crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col colx)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n    moveArmVert{:pre ( (isa ?arm arm)\n                       (at ?arm ?col)\n                       (isa ?col coly)\n                       (isa ?col2 coly))\n                :add ( (at ?arm ?col2))\n                :del ( (at ?arm ?col))\n                :txt ( (moving ?arm from ?col to ?col2))\n                :cmd (moveArmHoroz ?arm ?col2)\n                }\n\n    }\n  )&quot; &quot;(ops-search state '((at L y2)) ops :world world)&quot; &quot;(def ops\n  '{\n    moveVert {:pre ((isa ?block block)\n                     (crt ?block tr)\n                     (isa ?col coly)\n                     (isa ?col3 colx)\n                     (isa ?col2 coly)\n                     (at ?block ?col)\n                     (at ?block ?col3)\n                     )\n              :add ((at ?block ?col2))\n              :del ((at ?block ?col))\n              :txt ((move ?block from ?col to ?col2))\n              :cmd (moveHoz L ?col3 ?col2 ?col)\n              }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at ?crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col colx)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n    moveArmVert{:pre ( (isa ?arm arm)\n                       (at ?arm ?col)\n                       (isa ?col coly)\n                       (isa ?col2 coly))\n                :add ( (at ?arm ?col2))\n                :del ( (at ?arm ?col))\n                :txt ( (moving ?arm from ?col to ?col2))\n                :cmd (moveArmHoroz ?arm ?col2)\n                }\n\n    }\n  )&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa blueT block )\n     (crtx blueT c2)\n     (crty blueT y3)\n\n\n\n     (isa greenT block )\n     (isa yellowT block )\n     (isa redT block )\n\n     (isa blueC block )\n     (isa greenC block )\n     (isa yellowC block )\n     (isa redC block )\n\n     (isa block blueS)\n     (isa block greenS)\n     (isa block yellowS)\n     (isa block redS)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(ops-search state '((at blueT c3)) ops :world world)&quot; &quot;(ops-search state '((at blueT y3)) ops :world world)&quot; &quot;(defn startup [port]\n\n  (set-shrdlu-comms port)\n  (reset)\n  )&quot; &quot;(defn startup [port]\n\n  (set-shrdlu-comms port)\n\n  )&quot; &quot;(n-logosend1 (ops-search state '((at L y3)) ops :world world))&quot; &quot;(ops-search state '((at Tblue c3)) ops :world world)&quot; &quot;(nlogo-translate-cmd (ops-search state '((at Tblue c3)) ops :world world))&quot; &quot;(ops-search state '((crt Tblue tr)) ops :world world)&quot; &quot;(n-logosend1 (ops-search state '((at T c3)) ops :world world))&quot; &quot;(ops-search state '((at L c3)) ops :world world)&quot; &quot;(n-logosend1 (ops-search state '((at L c3)) ops :world world))&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa Tblue block )\n     (crtx Tblue c2)\n     (crty Tblue y3)\n\n\n\n     (isa Tyellow block )\n     (isa Tred block )\n\n     (isa Cblue block )\n     (isa Cgreen block )\n     (isa Cyellow block )\n     (isa Cred block )\n\n     (isa Sblue block )\n     (isa Sgreen block )\n     (isa Syellow block )\n     (isa Sred block )\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def state\n  '#{\n     (at T c1)\n     (at B c1)\n     (at L y1)\n\n     (at Tblue c2)\n     (at Tblue y1)\n     (crt Tblue fls)\n\n\n     (at Cblue c1)\n     (at Cblue y2)\n     }\n  )&quot; &quot;(def ops\n  '{\n    moveVert {:pre ((isa ?block block)\n                     (crt ?block tr)\n                     (isa ?col coly)\n                     (isa ?col3 colx)\n                     (isa ?col2 coly)\n                     (at ?block ?col)\n                     (at ?block ?col3)\n                     )\n              :add ((at ?block ?col2))\n              :del ((at ?block ?col))\n              :txt ((move ?block from ?col to ?col2))\n              :cmd (moveHoz L ?col3 ?col2 ?col)\n              }\n    moveHoroz {:pre ((isa ?block block)\n                      (crt ?block tr)\n                      (isa ?col colx)\n                      (isa ?col3 coly)\n                      (isa ?col2 colx)\n                      (at ?block ?col)\n                      (at ?block ?col3)\n                      )\n               :add ((at ?block ?col2))\n               :del ((at ?block ?col))\n               :txt ((move ?block from ?col to ?col2))\n               :cmd (moveHoz L ?col3 ?col2 ?col)\n               }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at ?crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col colx)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArmHoroz ?arm ?col2)\n                 }\n    moveArmVert{:pre ( (isa ?arm arm)\n                       (at ?arm ?col)\n                       (isa ?col coly)\n                       (isa ?col2 coly))\n                :add ( (at ?arm ?col2))\n                :del ( (at ?arm ?col))\n                :txt ( (moving ?arm from ?col to ?col2))\n                :cmd (moveArm ?arm ?col2)\n                }\n\n    }\n  )&quot; &quot;(ops-search state '((at B c3)) ops :world world)&quot; &quot;(defn nlogo-send-exec [cmd-list]\n  ; (ui-out :comm 'NL==&gt; cmd-list)\n  ;(println cmd-list \&quot;First\&quot;)\n\n   (nlogo-send (nlogo-translate-cmd cmd-list))\n  ;(let [cmd-str (nlogo-translate-cmd cmd-list)])\n  ; (let [cmd-list (nlogo-translate-cmd cmd-list)])\n  (println cmd-list \&quot;Sent _\&quot; ;(nlogo-translate-cmd cmd-list)\n            ;  (nlogo-send cmd-str)\n\n           ))&quot; &quot;(n-logosend1 (ops-search state '((at B c3)) ops :world world))&quot; &quot;(ops-search state '((at B c2)(at L y3)) ops :world world)&quot; &quot;(def ops\n  '{\n    moveVert {:pre ((isa ?block block)\n                     (crt ?block tr)\n                     (isa ?col coly)\n                     (isa ?col3 colx)\n                     (isa ?col2 coly)\n                     (at ?block ?col)\n                     (at ?block ?col3)\n                     )\n              :add ((at ?block ?col2))\n              :del ((at ?block ?col))\n              :txt ((move ?block from ?col to ?col2))\n              :cmd (moveHoz L ?col3 ?col2 ?col)\n              }\n    moveHoroz {:pre ((isa ?block block)\n                      (crt ?block tr)\n                      (isa ?col colx)\n                      (isa ?col3 coly)\n                      (isa ?col2 colx)\n                      (at ?block ?col)\n                      (at ?block ?col3)\n                      )\n               :add ((at ?block ?col2))\n               :del ((at ?block ?col))\n               :txt ((move ?block from ?col to ?col2))\n               :cmd (moveHoz L ?col3 ?col2 ?col)\n               }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr))                 :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at ?crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col colx)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArm ?arm ?col2)\n                 }\n    moveArmVert{:pre ( (isa ?arm arm)\n                       (at ?arm ?col)\n                       (isa ?col coly)\n                       (isa ?col2 coly))\n                :add ( (at ?arm ?col2))\n                :del ( (at ?arm ?col))\n                :txt ( (moving ?arm from ?col to ?col2))\n                :cmd (moveArm ?arm ?col2)\n                }\n\n    }\n  )&quot; &quot;(let [sizes '{small 5, med 7, large 9}\n      sp    \&quot; \&quot;\n      qt    \&quot;\\\&quot;\&quot;\n      str-qt   (fn[x] (str \&quot; \\\&quot;\&quot; x \&quot;\\\&quot; \&quot;))    ; wrap x in quotes\n      axis-no (fn[x] (apply str (rest (str x))))   ; strip first letter of axis name\n      ]\n\n\n  (defmatch nlogo-translate-cmd []\n\n\n            ((make ?nam )\n              :=&gt; (str 'exec.make (str-qt (? nam)) sp (axis-no (? nam)) ))\n\n\n\n            ((moveVert ?ax ?to ?from)\n              := (str 'pushshapeTwo sp (axis-no(? ax)) sp (axis-no(? to)) sp (axis-no(? from))))\n            ((moveHoz ?arm ?ax ?to ?from)\n              := (str 'pushshapeOne  (str-qt (? arm)) sp (axis-no(? ax)) sp (axis-no(? to)) sp (axis-no(? from))))\n            ((move-to ?s)   :=&gt; (str 'exec.move-to sp (axis-no (? s))))\n            ((moveArm ?a ?c)\n              :=&gt; (str 'exec.move-to sp (str-qt (? a)) sp (axis-no(? c))))\n\n            ((drop-at ?s)   :=&gt; (str 'exec.drop-at sp (axis-no (? s))))\n            ((pick-from ?s) :=&gt; (str 'exec.pick-from sp (axis-no (? s))))\n            ( ?_            :=&gt; (ui-out :dbg 'ERROR '(unknown NetLogo cmd)))\n\n\n            ))&quot; &quot;(n-logosend1 (ops-search state '((at B c2)(at L y3)) ops :world world))&quot; &quot;(n-logosend1 (ops-search state '((crt Tblue tr)) ops :world world))&quot; &quot;(def ops\n  '{\n    moveVert {:pre ((isa ?block block)\n                     (crt ?block tr)\n                     (isa ?col coly)\n                     (isa ?col3 colx)\n                     (isa ?col2 coly)\n                     (at ?block ?col)\n                     (at ?block ?col3)\n                     )\n              :add ((at ?block ?col2))\n              :del ((at ?block ?col))\n              :txt ((move ?block from ?col to ?col2))\n              :cmd (moveVert ?col3 ?col2 ?col)\n              }\n    moveHoroz {:pre ((isa ?block block)\n                      (crt ?block tr)\n                      (isa ?col colx)\n                      (isa ?col3 coly)\n                      (isa ?col2 colx)\n                      (at ?block ?col)\n                      (at ?block ?col3)\n                      )\n               :add ((at ?block ?col2))\n               :del ((at ?block ?col))\n               :txt ((move ?block from ?col to ?col2))\n               :cmd (moveHoz L ?col3 ?col2 ?col)\n               }\n    createBlock{:pre ( (isa ?block block)\n                       (crt ?block fls)\n                       (crtx ?block ?crtx)\n                       (crty ?block ?crty)\n                       (at B ?crtx)\n                       (at L ?crty)\n                       )\n                :add ( (crt ?block tr)\n                       (at ?block ?crtx)\n                       (at ?block ?crty)\n                       )\n                :del ( (crt ?block fls))\n                :txt ( (crt the block ?block B at ?crtx L at ?crty))\n                :cmd (create ?block )\n                }\n    moveArmHoroz{:pre ( (isa ?arm arm)\n                        (at ?arm ?col)\n                        (isa ?col colx)\n                        (isa ?col2 colx))\n                 :add ( (at ?arm ?col2))\n                 :del ( (at ?arm ?col))\n                 :txt ( (moving ?arm from ?col to ?col2))\n                 :cmd (moveArm ?arm ?col2)\n                 }\n    moveArmVert{:pre ( (isa ?arm arm)\n                       (at ?arm ?col)\n                       (isa ?col coly)\n                       (isa ?col2 coly))\n                :add ( (at ?arm ?col2))\n                :del ( (at ?arm ?col))\n                :txt ( (moving ?arm from ?col to ?col2))\n                :cmd (moveArm ?arm ?col2)\n                }\n\n    }\n  )&quot; &quot;(startup 2222)&quot; &quot;(startup 2223)&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa Tblue block )\n     (crtx Tblue c2)\n     (crty Tblue y1)\n\n     (isa Tyellow block )\n     (crtx Tyellow c4)\n     (crty Tyellow y1)\n\n     (isa Tgreen block )\n     (crtx Tgreen c3)\n     (crty Tgreen y1)\n\n     (isa Tred block )\n     (crtx Tred c4)\n     (crty Tred y1)\n\n     (isa Cblue block )\n     (crtx Cblue c2)\n     (crty Cblue y8)\n\n     (isa Cgreen block )\n     (crtx Cgreen c3)\n     (crty Cgreen y8)\n\n     (isa Cyellow block )\n     (crtx Cyellow c4)\n     (crty Cyellow y8)\n\n     (isa Cred block )\n     (crtx Cred c5)\n     (crty Cred y8)\n\n     (isa Sblue block )\n     (crtx Sblue c1)\n     (crty Sblue y2)\n\n     (isa Sgreen block )\n     (crtx Sgreen c1)\n     (crty Sgreen y3)\n\n     (isa Syellow block )\n     (crtx Syellow c1)\n     (crty Syellow y4)\n\n     (isa Sred block )\n     (crtx Sred c1)\n     (crty Sred y5)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly)  (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(n-logosend1 (ops-search state '((at Tblue c3)) ops :world world))&quot; &quot;(ops-search state '((at Tblue c3)(at Tblue y3)) ops :world world)&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa Tblue block )\n     (crtx Tblue c2)\n     (crty Tblue y1)\n\n     (isa Tyellow block )\n     (crtx Tyellow c4)\n     (crty Tyellow y1)\n\n     (isa Tgreen block )\n     (crtx Tgreen c3)\n     (crty Tgreen y1)\n\n     (isa Tred block )\n     (crtx Tred c4)\n     (crty Tred y1)\n\n     (isa Cblue block )\n     (crtx Cblue c2)\n     (crty Cblue y8)\n\n     (isa Cgreen block )\n     (crtx Cgreen c3)\n     (crty Cgreen y8)\n\n     (isa Cyellow block )\n     (crtx Cyellow c4)\n     (crty Cyellow y8)\n\n     (isa Cred block )\n     (crtx Cred c5)\n     (crty Cred y8)\n\n     (isa Sblue block )\n     (crtx Sblue c1)\n     (crty Sblue y2)\n\n     (isa Sgreen block )\n     (crtx Sgreen c1)\n     (crty Sgreen y3)\n\n     (isa Syellow block )\n     (crtx Syellow c1)\n     (crty Syellow y4)\n\n     (isa Sred block )\n     (crtx Sred c1)\n     (crty Sred y5)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx)(isa c4 colx);(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly) (isa y3 coly)(isa y4 coly);(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa Tblue block )\n     (crtx Tblue c2)\n     (crty Tblue y1)\n\n     (isa Tyellow block )\n     (crtx Tyellow c4)\n     (crty Tyellow y1)\n\n     (isa Tgreen block )\n     (crtx Tgreen c3)\n     (crty Tgreen y1)\n\n     (isa Tred block )\n     (crtx Tred c4)\n     (crty Tred y1)\n\n     (isa Cblue block )\n     (crtx Cblue c2)\n     (crty Cblue y8)\n\n     (isa Cgreen block )\n     (crtx Cgreen c3)\n     (crty Cgreen y8)\n\n     (isa Cyellow block )\n     (crtx Cyellow c4)\n     (crty Cyellow y8)\n\n     (isa Cred block )\n     (crtx Cred c5)\n     (crty Cred y8)\n\n     (isa Sblue block )\n     (crtx Sblue c1)\n     (crty Sblue y2)\n\n     (isa Sgreen block )\n     (crtx Sgreen c1)\n     (crty Sgreen y3)\n\n     (isa Syellow block )\n     (crtx Syellow c1)\n     (crty Syellow y4)\n\n     (isa Sred block )\n     (crtx Sred c1)\n     (crty Sred y5)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx);(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly) (isa y3 coly);(isa y4 coly);(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa Tblue block )\n     (crtx Tblue c2)\n     (crty Tblue y1)\n\n     (isa Tyellow block )\n     (crtx Tyellow c4)\n     (crty Tyellow y1)\n\n     (isa Tgreen block )\n     (crtx Tgreen c3)\n     (crty Tgreen y1)\n\n     (isa Tred block )\n     (crtx Tred c4)\n     (crty Tred y1)\n\n     (isa Cblue block )\n     (crtx Cblue c2)\n     (crty Cblue y8)\n\n     (isa Cgreen block )\n     (crtx Cgreen c3)\n     (crty Cgreen y8)\n\n     (isa Cyellow block )\n     (crtx Cyellow c4)\n     (crty Cyellow y8)\n\n     (isa Cred block )\n     (crtx Cred c5)\n     (crty Cred y8)\n\n     (isa Sblue block )\n     (crtx Sblue c1)\n     (crty Sblue y2)\n\n     (isa Sgreen block )\n     (crtx Sgreen c1)\n     (crty Sgreen y3)\n\n     (isa Syellow block )\n     (crtx Syellow c1)\n     (crty Syellow y4)\n\n     (isa Sred block )\n     (crtx Sred c1)\n     (crty Sred y5)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx)(isa c4 colx)(isa c5 colx);(isa c6 colx)(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly) (isa y3 coly)(isa y4 coly)(isa y5 coly);(isa y6 coly)(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;2650.261404&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa Tblue block )\n     (crtx Tblue c2)\n     (crty Tblue y1)\n\n     (isa Tyellow block )\n     (crtx Tyellow c4)\n     (crty Tyellow y1)\n\n     (isa Tgreen block )\n     (crtx Tgreen c3)\n     (crty Tgreen y1)\n\n     (isa Tred block )\n     (crtx Tred c4)\n     (crty Tred y1)\n\n     (isa Cblue block )\n     (crtx Cblue c2)\n     (crty Cblue y8)\n\n     (isa Cgreen block )\n     (crtx Cgreen c3)\n     (crty Cgreen y8)\n\n     (isa Cyellow block )\n     (crtx Cyellow c4)\n     (crty Cyellow y8)\n\n     (isa Cred block )\n     (crtx Cred c5)\n     (crty Cred y8)\n\n     (isa Sblue block )\n     (crtx Sblue c1)\n     (crty Sblue y2)\n\n     (isa Sgreen block )\n     (crtx Sgreen c1)\n     (crty Sgreen y3)\n\n     (isa Syellow block )\n     (crtx Syellow c1)\n     (crty Syellow y4)\n\n     (isa Sred block )\n     (crtx Sred c1)\n     (crty Sred y5)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx)(isa c4 colx)(isa c5 colx)(isa c6 colx);(isa c7 colx)(isa c8 colx)\n     (isa y1 coly) (isa y2 coly) (isa y3 coly)(isa y4 coly)(isa y5 coly)(isa y6 coly);(isa y7 coly)(isa y8 coly)\n\n     })&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa Tblue block )\n     (crtx Tblue c2)\n     (crty Tblue y1)\n\n     (isa Tyellow block )\n     (crtx Tyellow c4)\n     (crty Tyellow y1)\n\n     (isa Tgreen block )\n     (crtx Tgreen c3)\n     (crty Tgreen y1)\n\n     (isa Tred block )\n     (crtx Tred c4)\n     (crty Tred y1)\n\n     (isa Cblue block )\n     (crtx Cblue c2)\n     (crty Cblue y8)\n\n     (isa Cgreen block )\n     (crtx Cgreen c3)\n     (crty Cgreen y8)\n\n     (isa Cyellow block )\n     (crtx Cyellow c4)\n     (crty Cyellow y8)\n\n     (isa Cred block )\n     (crtx Cred c5)\n     (crty Cred y8)\n\n     (isa Sblue block )\n     (crtx Sblue c1)\n     (crty Sblue y2)\n\n     (isa Sgreen block )\n     (crtx Sgreen c1)\n     (crty Sgreen y3)\n\n     (isa Syellow block )\n     (crtx Syellow c1)\n     (crty Syellow y4)\n\n     (isa Sred block )\n     (crtx Sred c1)\n     (crty Sred y5)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx)(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx);(isa c8 colx)\n     (isa y1 coly) (isa y2 coly) (isa y3 coly)(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly);(isa y8 coly)\n\n     })&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa Tblue block )\n     (crtx Tblue c2)\n     (crty Tblue y1)\n\n     (isa Tyellow block )\n     (crtx Tyellow c4)\n     (crty Tyellow y1)\n\n     (isa Tgreen block )\n     (crtx Tgreen c3)\n     (crty Tgreen y1)\n\n     (isa Tred block )\n     (crtx Tred c4)\n     (crty Tred y1)\n\n     (isa Cblue block )\n     (crtx Cblue c2)\n     (crty Cblue y8)\n\n     (isa Cgreen block )\n     (crtx Cgreen c3)\n     (crty Cgreen y8)\n\n     (isa Cyellow block )\n     (crtx Cyellow c4)\n     (crty Cyellow y8)\n\n     (isa Cred block )\n     (crtx Cred c5)\n     (crty Cred y8)\n\n     (isa Sblue block )\n     (crtx Sblue c1)\n     (crty Sblue y2)\n\n     (isa Sgreen block )\n     (crtx Sgreen c1)\n     (crty Sgreen y3)\n\n     (isa Syellow block )\n     (crtx Syellow c1)\n     (crty Syellow y4)\n\n     (isa Sred block )\n     (crtx Sred c1)\n     (crty Sred y5)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx)(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx);\n     (isa y1 coly) (isa y2 coly) (isa y3 coly)(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly);\n\n     })&quot; &quot;(time (ops-search state '((at Tblue c3)(at Tblue y3)) ops :world world))&quot; &quot;(def state\n  '#{\n     (at T c1)\n     (at B c1)\n     (at L y1)\n\n\n     (crt Tblue fls)\n     (crt Cblue fls)\n\n\n     }\n  )&quot; &quot;(n-logosend1 (ops-search state '((at Tblue c3)(at Tblue y3)) ops :world world))&quot; &quot;(startup 2224)&quot; &quot;(n-logosend1 (ops-search state '((at Cblue c4)(at Tblue y4)) ops :world world))&quot; &quot;(startup 2225)&quot; &quot;(def world\n  '#{\n     (crt tr alive)\n     (crt fls alive)\n\n     (isa T arm)\n     (isa B arm)\n     (isa L arm)\n\n     (isa Tblue block )\n     (crtx Tblue c2)\n     (crty Tblue y1)\n\n     (isa Tyellow block )\n     (crtx Tyellow c4)\n     (crty Tyellow y1)\n\n     (isa Tgreen block )\n     (crtx Tgreen c3)\n     (crty Tgreen y1)\n\n     (isa Tred block )\n     (crtx Tred c4)\n     (crty Tred y1)\n\n     (isa Cblue block )\n     (crtx Cblue c2)\n     (crty Cblue y8)\n\n     (isa Cgreen block )\n     (crtx Cgreen c3)\n     (crty Cgreen y8)\n\n     (isa Cyellow block )\n     (crtx Cyellow c4)\n     (crty Cyellow y8)\n\n     (isa Cred block )\n     (crtx Cred c5)\n     (crty Cred y8)\n\n     (isa Sblue block )\n     (crtx Sblue c1)\n     (crty Sblue y2)\n\n     (isa Sgreen block )\n     (crtx Sgreen c1)\n     (crty Sgreen y3)\n\n     (isa Syellow block )\n     (crtx Syellow c1)\n     (crty Syellow y4)\n\n     (isa Sred block )\n     (crtx Sred c1)\n     (crty Sred y5)\n\n     (isa c1 colx) (isa c2 colx) (isa c3 colx);(isa c4 colx)(isa c5 colx)(isa c6 colx)(isa c7 colx)(isa c8 colx);\n     (isa y1 coly) (isa y2 coly) (isa y3 coly);(isa y4 coly)(isa y5 coly)(isa y6 coly)(isa y7 coly)(isa y8 coly);\n\n     })&quot; &quot;(def planner-ops\n  '{\n    :moveHoroz{:name moveHoroz\n               :achieves (at ?block ?col2)\n               :post ()\n               :when ( (isa ?block block)\n                       (isa ?col colx)\n                       (isa ?col3 coly)\n                       (isa ?col2 colx)\n                       )\n               :del ( (at ?block ?col))\n               :add ( (at ?block ?col2))\n               :pre ()\n               :txt ( (move ?block from ?col to ?col2))\n               :cmd (moveHoz L ?col3 ?col2 ?col)\n               }\n    }\n  )&quot; &quot;(ns pussher.planner)\n;===================================================\n; based on: strips-search.clj from SHRDLU model\n; naming changes only\n;===================================================\n\n\n;these operators can have all of these slots...\n;{ :name put-on\n;  :achieves (on ?x ?y)\n;  :when   ( (at ?x ?sx) (at ?y ?sy) (:guard (not= (? sx) (? sy))) )\n;  :post   ( (protected ?sx) (protected ?sy)\n;            (cleartop ?x)\n;            (cleartop ?y)\n;            (hand empty) )\n;  :pre ()\n;  :del ( (at ?x ?sx)\n;         (cleartop ?y)\n;         (protected ?sx)\n;         (protected ?sy) )\n;  :add ( (at ?x ?sy)\n;         (on ?x ?y) )\n;  :cmd ( (pick-from ?sx)\n;         (drop-at ?sy) )\n;  :txt (put ?x on ?y)\n;  }\n;\n;NB: in this example the ops have unique :achieves + :when\n;\n;They are processed as follows...\n;\n;goal &lt;- (pop goal-stack)\n;match (:achieves op) goal\n;  match (:when op) BD\n;    push( expand op , goal-stack )\n;    push-all( expand (:post op), goal-stack )\n\n\n\n\n(defn print-goals [q]\n  (if (not (empty? q))\n    (do\n      (ui-out :dbg \&quot;GOALS:\&quot;)\n      (doseq [x q]\n        (ui-out :dbg \&quot;      \&quot; (if (map? x) [(:name x) :=&gt; (:achieves x)] x))\n        )\n      ;(ui-out :dbg '------)\n      )\n    ))\n\n(def goalq (atom (java.util.concurrent.LinkedBlockingDeque.)))\n\n(defn ui-out [tag msg &amp; r]\n  (println tag \\tab msg r))\n\n(declare strips-loop update-path\n         goal-mop-apply apply-goal-op)\n;\n;(defn planner [state goal goal-ops]\n;  (.clear @goalq)\n;  (.push @goalq goal)\n;  (strips-loop {:state state, :cmds nil, :txt nil} goal-ops 60))\n\n(defn planner [state goal goal-ops]\n  (.clear @goalq)\n  (doseq [p goal] (.push @goalq p))\n  (strips-loop {:state state, :cmds nil, :txt nil} goal-ops 60))\n\n(defn strips-loop\n  [path goal-ops limit]\n  (if (zero? limit)\n    (throw (new RuntimeException \&quot;limit exceeded in run-goal-ops\&quot;)))\n\n  ;(println path)\n  (print-goals @goalq)\n\n  (if-let [goal (.poll @goalq)]\n    (cond\n      (map? goal) ;; it is a partially matched op\n      (do\n        (ui-out :dbg '** 'APPLYING (:name goal) '=&gt; (:achieves goal))\n        ; (ui-out :dbg '** (:add goal))\n        (recur\n          (update-path path (goal-mop-apply (:state path) goal))\n          goal-ops (dec limit))\n        )\n\n      ;; else it is a fact\n      (not (contains? (:state path) goal))\n      (do (ui-out :dbg 'solving goal)\n          (some (partial apply-goal-op (:state path) goal)\n                (vals goal-ops))\n          (recur path goal-ops (dec limit))\n          )\n      ;; else it is an existing fact\n      :else\n      (recur path goal-ops (dec limit))\n      )\n    path\n    )\n  )\n\n\n(defn goal-mop-apply [bd mop]\n  (mfind* [(:pre mop) bd]\n          (ui-out :dbg '** (mout (:add mop)))\n          ; (ui-out :dbg '=&gt; (mout mop))\n          {:state (union (mout (:add mop))\n                         (difference bd (mout (:del mop))))\n           :cmd   (mout (:cmd mop))\n           :txt   (mout (:txt mop))\n           }\n          ))\n\n\n(defn apply-goal-op [bd goal op]\n  (println (list 'trying (:name op)))\n  (mlet [(:achieves op) goal]\n\n        (mfind* [(:when op) bd]\n                (ui-out :dbg 'using=&gt; (:name op))\n                (let [mop (mout op)]\n                  ;(println (list 'new-mop mop))\n                  (.push @goalq mop)\n                  (ui-out :dbg 'new-goals (or (:post mop) '-none))\n                  (doseq [p (reverse (:post mop))]\n                    (.push @goalq p))\n\n                  ;(println (list 'succeeded (:name op)))\n                  true\n                  ))\n        ))\n\n\n(defn update-path\n  [current newp]\n  { :state (:state newp),\n   :cmds  (concat (:cmds current) (:cmd newp)),\n   :txt   (concat (:txt current) (:txt newp))\n   })\n\n&quot;], :remote []}}</component>
</project>